#include<bits/stdc++.h>
#include<iostream>
using namespace std;
int main()
{
	string genome;
	string motif;
	cout<<"Enter the genome"<<endl;
	cin>>genome;
	cout<<"Enter the motif to be searched"<<endl;
	cin>>motif;
	//Getting the length of the motif
	int motifsize=motif.size();
	//The total number of spacers in the genome
	int spacercount=0;
    //Map for storing the valid spacers
	map<int,string> mymap;
	int k=0;
	int found=-1;
	int prevfound;
	do
	{
		//Will return the index of the motif starting from found+1 index
		found=genome.find(motif,found+1);
		if(found!=-1)
		{
			k++;
            //We want this for the first spacer found in the genome only
			if(k==1)
			{
            //Increasing the index to skip the motif so only have spacer length
			prevfound=found+motifsize;
			}
		}
        //Motif is found second time when k=2 so checking the spacer in between of it
		if(k==2)
		{
			if(found-prevfound<=30)
			{
				string spacer;
				while(prevfound!=found)
				{
					spacer=spacer+genome[prevfound];
					prevfound++;
				}
				mymap[spacercount]=spacer;
				spacercount++;
			}
            //To continue from that motif
			k=1;
            prevfound=found+motifsize;
		}
	}while(found!=-1);
	for(auto it=mymap.begin();it!=mymap.end();it++)
	{
		cout<<it->first;
		cout<<"--------->>>>>>";
		cout<<it->second<<endl;
	}
	if(mymap.empty())
    {
        cout<<"There is no valid spacer in the genome for this motif"<<endl;
        return 0;
    }
    while(1)
    {
    cout<<"Enter the spacer number to get details of OR PRESS -1 TO EXIT"<<endl;
    int Snumber;
    cin>>Snumber;
    if(Snumber==-1)
    {
        return 0;
    }
    string spacerdetail;
    spacerdetail=mymap[Snumber];
    int l=spacerdetail.length();
    int Acount=0;
    int Tcount=0;
    int Gcount=0;
    int Ccount=0;
    for(int i=0;i<l;i++)
    {
        char c=spacerdetail[i];
        if(c=='A'||c=='a')
        {
            Acount++;
        }
        if(c=='T'||c=='t')
        {
            Tcount++;
        }
        if(c=='G'||c=='g')
        {
            Gcount++;
        }
        if(c=='C'||c=='c')
        {
            Ccount++;
        }
    }
    float Aoccurence,Toccurence,Goccurence,Coccurence;
    Aoccurence=((float)Acount/l);
    Toccurence=((float)Tcount/l);
    Goccurence=((float)Gcount/l);
    Coccurence=((float)Ccount/l);
    cout<<"Percent Occurence of A base in the spacer is "<<Aoccurence*100<<endl;
    cout<<"Percent Occurence of T base in the spacer is "<<Toccurence*100<<endl;
    cout<<"Percent Occurence of G base in the spacer is "<<Goccurence*100<<endl;
    cout<<"Percent Occurence of C base in the spacer is "<<Coccurence*100<<endl;
    }
}
